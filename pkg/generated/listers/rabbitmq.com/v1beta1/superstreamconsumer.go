/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.

This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.

This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/rabbitmq/messaging-topology-operator/api/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SuperStreamConsumerLister helps list SuperStreamConsumers.
// All objects returned here must be treated as read-only.
type SuperStreamConsumerLister interface {
	// List lists all SuperStreamConsumers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.SuperStreamConsumer, err error)
	// SuperStreamConsumers returns an object that can list and get SuperStreamConsumers.
	SuperStreamConsumers(namespace string) SuperStreamConsumerNamespaceLister
	SuperStreamConsumerListerExpansion
}

// superStreamConsumerLister implements the SuperStreamConsumerLister interface.
type superStreamConsumerLister struct {
	indexer cache.Indexer
}

// NewSuperStreamConsumerLister returns a new SuperStreamConsumerLister.
func NewSuperStreamConsumerLister(indexer cache.Indexer) SuperStreamConsumerLister {
	return &superStreamConsumerLister{indexer: indexer}
}

// List lists all SuperStreamConsumers in the indexer.
func (s *superStreamConsumerLister) List(selector labels.Selector) (ret []*v1beta1.SuperStreamConsumer, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SuperStreamConsumer))
	})
	return ret, err
}

// SuperStreamConsumers returns an object that can list and get SuperStreamConsumers.
func (s *superStreamConsumerLister) SuperStreamConsumers(namespace string) SuperStreamConsumerNamespaceLister {
	return superStreamConsumerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SuperStreamConsumerNamespaceLister helps list and get SuperStreamConsumers.
// All objects returned here must be treated as read-only.
type SuperStreamConsumerNamespaceLister interface {
	// List lists all SuperStreamConsumers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.SuperStreamConsumer, err error)
	// Get retrieves the SuperStreamConsumer from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.SuperStreamConsumer, error)
	SuperStreamConsumerNamespaceListerExpansion
}

// superStreamConsumerNamespaceLister implements the SuperStreamConsumerNamespaceLister
// interface.
type superStreamConsumerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SuperStreamConsumers in the indexer for a given namespace.
func (s superStreamConsumerNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.SuperStreamConsumer, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.SuperStreamConsumer))
	})
	return ret, err
}

// Get retrieves the SuperStreamConsumer from the indexer for a given namespace and name.
func (s superStreamConsumerNamespaceLister) Get(name string) (*v1beta1.SuperStreamConsumer, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("superstreamconsumer"), name)
	}
	return obj.(*v1beta1.SuperStreamConsumer), nil
}
