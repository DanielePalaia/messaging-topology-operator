/*
RabbitMQ Messaging Topology Kubernetes Operator
Copyright 2021 VMware, Inc.

This product is licensed to you under the Mozilla Public License 2.0 license (the "License").  You may not use this product except in compliance with the Mozilla 2.0 License.

This product may include a number of subcomponents with separate copyright notices and license terms. Your use of these subcomponents is subject to the terms and conditions of the subcomponent's license, as noted in the LICENSE file.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	"context"
	"time"

	v1beta1 "github.com/rabbitmq/messaging-topology-operator/api/v1beta1"
	scheme "github.com/rabbitmq/messaging-topology-operator/pkg/generated/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// SuperStreamConsumersGetter has a method to return a SuperStreamConsumerInterface.
// A group's client should implement this interface.
type SuperStreamConsumersGetter interface {
	SuperStreamConsumers(namespace string) SuperStreamConsumerInterface
}

// SuperStreamConsumerInterface has methods to work with SuperStreamConsumer resources.
type SuperStreamConsumerInterface interface {
	Create(ctx context.Context, superStreamConsumer *v1beta1.SuperStreamConsumer, opts v1.CreateOptions) (*v1beta1.SuperStreamConsumer, error)
	Update(ctx context.Context, superStreamConsumer *v1beta1.SuperStreamConsumer, opts v1.UpdateOptions) (*v1beta1.SuperStreamConsumer, error)
	UpdateStatus(ctx context.Context, superStreamConsumer *v1beta1.SuperStreamConsumer, opts v1.UpdateOptions) (*v1beta1.SuperStreamConsumer, error)
	Delete(ctx context.Context, name string, opts v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error
	Get(ctx context.Context, name string, opts v1.GetOptions) (*v1beta1.SuperStreamConsumer, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1beta1.SuperStreamConsumerList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.SuperStreamConsumer, err error)
	SuperStreamConsumerExpansion
}

// superStreamConsumers implements SuperStreamConsumerInterface
type superStreamConsumers struct {
	client rest.Interface
	ns     string
}

// newSuperStreamConsumers returns a SuperStreamConsumers
func newSuperStreamConsumers(c *RabbitmqV1beta1Client, namespace string) *superStreamConsumers {
	return &superStreamConsumers{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the superStreamConsumer, and returns the corresponding superStreamConsumer object, and an error if there is any.
func (c *superStreamConsumers) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1beta1.SuperStreamConsumer, err error) {
	result = &v1beta1.SuperStreamConsumer{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("superstreamconsumers").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of SuperStreamConsumers that match those selectors.
func (c *superStreamConsumers) List(ctx context.Context, opts v1.ListOptions) (result *v1beta1.SuperStreamConsumerList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1beta1.SuperStreamConsumerList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("superstreamconsumers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested superStreamConsumers.
func (c *superStreamConsumers) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("superstreamconsumers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a superStreamConsumer and creates it.  Returns the server's representation of the superStreamConsumer, and an error, if there is any.
func (c *superStreamConsumers) Create(ctx context.Context, superStreamConsumer *v1beta1.SuperStreamConsumer, opts v1.CreateOptions) (result *v1beta1.SuperStreamConsumer, err error) {
	result = &v1beta1.SuperStreamConsumer{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("superstreamconsumers").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(superStreamConsumer).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a superStreamConsumer and updates it. Returns the server's representation of the superStreamConsumer, and an error, if there is any.
func (c *superStreamConsumers) Update(ctx context.Context, superStreamConsumer *v1beta1.SuperStreamConsumer, opts v1.UpdateOptions) (result *v1beta1.SuperStreamConsumer, err error) {
	result = &v1beta1.SuperStreamConsumer{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("superstreamconsumers").
		Name(superStreamConsumer.Name).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(superStreamConsumer).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *superStreamConsumers) UpdateStatus(ctx context.Context, superStreamConsumer *v1beta1.SuperStreamConsumer, opts v1.UpdateOptions) (result *v1beta1.SuperStreamConsumer, err error) {
	result = &v1beta1.SuperStreamConsumer{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("superstreamconsumers").
		Name(superStreamConsumer.Name).
		SubResource("status").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(superStreamConsumer).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the superStreamConsumer and deletes it. Returns an error if one occurs.
func (c *superStreamConsumers) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("superstreamconsumers").
		Name(name).
		Body(&opts).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *superStreamConsumers) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	var timeout time.Duration
	if listOpts.TimeoutSeconds != nil {
		timeout = time.Duration(*listOpts.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("superstreamconsumers").
		VersionedParams(&listOpts, scheme.ParameterCodec).
		Timeout(timeout).
		Body(&opts).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched superStreamConsumer.
func (c *superStreamConsumers) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1beta1.SuperStreamConsumer, err error) {
	result = &v1beta1.SuperStreamConsumer{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("superstreamconsumers").
		Name(name).
		SubResource(subresources...).
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
